<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- spring security project의 핵심 context 파일 -->
	<!-- 여기에 security 설정과 관련된 내용을 작성 -->
	
	<!-- 암호화 설정을 사용하기 위한 bean 설정 -->
	<!-- controller, service가 아닌 최초 인증 과정에서 사용할 bean -->
	<!-- 생성자에 암호화 반복 횟수를 설정 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4"/>
	</bean>
	
	<!-- Login을 수행할때 user DB로부터 사용자 정보 가져오기 설정 -->
	<bean id="secureDao" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="authDB"/>
		<property name="usersByUsernameQuery">
			<value>
				SELECT user_name AS username, user_pass AS password, enabled
				FROM tbl_users WHERE username=?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT username, authority
				FROM authorities
				WHERE username=?
			</value>
		</property>
	</bean>
	
	
	<security:authentication-manager>
	 	<security:authentication-provider user-service-ref="secureDao">
			<security:password-encoder ref="passwordEncoder"/>
		
			
		</security:authentication-provider>
	</security:authentication-manager>
	
	
	<!-- 사용자 인증을 할때 우리가 만든 login form과 연동하기 위한 설정 -->
	
	<!-- 
		
		<security:logout
			logout-url="/logout"  => 로그아웃 기능을 별도로 만들지 않고 시큐리티가 제공하는 로그아웃을 사용하겠다 라는 의미이다.
			invalidate-session="true"
			logout-success-url=""
		/>
		
		<security:http auto-config="true" use-expressions="true">
		auto-config : form 기반 로그인, 기본인증 기본 로그인을 활성화
		use-expressions
		
		hasRole() 한가지만 체크
		hasAnyRole() 두개 이상을 체크
		permitAll() 별도의 인증절차 없이 통과 
	
	 -->
	<security:http auto-config="true" use-expressions="true">
		<security:csrf disabled="false"/>
		
		<security:intercept-url access="hasRole('admin')" pattern="/admin/**"/>
		
		<security:intercept-url access="hasAnyRole('admin','user')" pattern="/user/mypage"/>
		
		<security:intercept-url access="permitAll()" pattern="/user/**"/>
		
		<security:intercept-url access="permitAll()" pattern="/**"/>
	
		<security:form-login
			login-page="/login"
			login-processing-url=""	
			default-target-url=""
			username-parameter="username"
			password-parameter="password"
		/>
		
		<security:logout
			logout-url="/logout"
			invalidate-session="true"
			logout-success-url=""
		/>
	
	</security:http>
	
	
</beans>

